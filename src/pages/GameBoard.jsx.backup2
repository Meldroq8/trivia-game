import { useState, useEffect, useRef } from 'react'
import { useNavigate } from 'react-router-dom'
import sampleData from '../data/sampleQuestions.json'
import PresentationModeToggle from '../components/PresentationModeToggle'

function GameBoard({ gameState, setGameState }) {
  const navigate = useNavigate()
  const containerRef = useRef(null)
  const headerRef = useRef(null)
  const footerRef = useRef(null)
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 })
  const [headerHeight, setHeaderHeight] = useState(0)
  const [footerHeight, setFooterHeight] = useState(0)

  useEffect(() => {
    if (!gameState.selectedCategories.length) {
      navigate('/categories')
      return
    }

    const updateDimensions = () => {
      if (containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect()
        setDimensions({ width: rect.width, height: rect.height })
      }

      if (headerRef.current) {
        const headerRect = headerRef.current.getBoundingClientRect()
        setHeaderHeight(headerRect.height)
      }

      if (footerRef.current) {
        const footerRect = footerRef.current.getBoundingClientRect()
        setFooterHeight(footerRect.height)
      }
    }

    updateDimensions()
    window.addEventListener('resize', updateDimensions)
    return () => window.removeEventListener('resize', updateDimensions)
  }, [gameState.selectedCategories.length, navigate])

  const getCategoryById = (categoryId) => {
    const savedData = localStorage.getItem('triviaData')
    if (savedData) {
      const data = JSON.parse(savedData)
      return data.categories.find(cat => cat.id === categoryId)
    }
    return sampleData.categories.find(cat => cat.id === categoryId)
  }

  const isQuestionUsed = (categoryId, questionIndex) => {
    return gameState.usedQuestions.has(`${categoryId}-${questionIndex}`)
  }

  const isPointValueUsed = (categoryId, points, buttonIndex) => {
    // Check if this specific button has been used for this category
    // Each button is tracked individually with category-points-buttonIndex

    // Create a key pattern for this specific button
    const pointValueKey = `${categoryId}-${points}-${buttonIndex}`

    // Check if this specific button was used
    const usedQuestions = Array.from(gameState.usedQuestions)
    const isUsed = gameState.usedPointValues && gameState.usedPointValues.has(pointValueKey)

    console.log(`🔍 Button state check: ${categoryId} ${points}pts button ${buttonIndex}`)
    console.log(`   Point value key: ${pointValueKey}`)
    console.log(`   Used point values:`, gameState.usedPointValues ? Array.from(gameState.usedPointValues) : 'undefined')
    console.log(`   Button disabled: ${isUsed}`)

    return isUsed || false
  }

  const getPoints = () => [200, 400, 600]

  const getQuestionPoints = (questionIndex) => {
    const points = getPoints()
    return points[questionIndex]
  }

  const handleQuestionClick = (categoryId, points, buttonIndex = 0) => {
    const category = getCategoryById(categoryId)
    if (!category) return

    // Get questions from the questions object using categoryId as key
    const savedData = localStorage.getItem('triviaData')
    let questions
    if (savedData) {
      try {
        const data = JSON.parse(savedData)
        questions = data.questions && data.questions[categoryId]
      } catch (error) {
        console.error('Error parsing localStorage data:', error)
        questions = sampleData.questions[categoryId]
      }
    } else {
      questions = sampleData.questions[categoryId]
    }

    // Fallback to sampleData if questions not found
    if (!questions) {
      questions = sampleData.questions[categoryId]
    }

    if (!questions || questions.length === 0) {
      console.warn(`No questions found for category: ${categoryId}`)
      return
    }

    // Determine difficulty based on points
    let targetDifficulty
    if (points === 200) {
      targetDifficulty = 'easy'
    } else if (points === 400) {
      targetDifficulty = 'medium'
    } else if (points === 600) {
      targetDifficulty = 'hard'
    } else {
      console.warn(`Invalid points value: ${points}`)
      return
    }

    // Filter questions by difficulty
    const questionsWithDifficulty = questions.filter(q => q.difficulty === targetDifficulty)

    console.log(`🎯 Looking for ${targetDifficulty} questions (${points} points) in category: ${categoryId}`)
    console.log(`📊 Found ${questionsWithDifficulty.length} ${targetDifficulty} questions out of ${questions.length} total`)

    if (questionsWithDifficulty.length === 0) {
      console.warn(`❌ No ${targetDifficulty} questions found for category: ${categoryId}`)
      console.log(`📋 Available difficulties:`, questions.map(q => q.difficulty))

      // Smart fallback: try nearby difficulties
      let fallbackDifficulty = null
      let fallbackQuestions = []

      if (targetDifficulty === 'easy') {
        // For easy (200): try medium, then hard
        console.log(`🔄 Trying fallback: easy → medium → hard`)
        fallbackQuestions = questions.filter(q => q.difficulty === 'medium')
        if (fallbackQuestions.length > 0) {
          fallbackDifficulty = 'medium'
        } else {
          fallbackQuestions = questions.filter(q => q.difficulty === 'hard')
          fallbackDifficulty = 'hard'
        }
      } else if (targetDifficulty === 'medium') {
        // For medium (400): try easy, then hard
        console.log(`🔄 Trying fallback: medium → easy → hard`)
        fallbackQuestions = questions.filter(q => q.difficulty === 'easy')
        if (fallbackQuestions.length > 0) {
          fallbackDifficulty = 'easy'
        } else {
          fallbackQuestions = questions.filter(q => q.difficulty === 'hard')
          fallbackDifficulty = 'hard'
        }
      } else if (targetDifficulty === 'hard') {
        // For hard (600): try medium, then easy
        console.log(`🔄 Trying fallback: hard → medium → easy`)
        fallbackQuestions = questions.filter(q => q.difficulty === 'medium')
        if (fallbackQuestions.length > 0) {
          fallbackDifficulty = 'medium'
        } else {
          fallbackQuestions = questions.filter(q => q.difficulty === 'easy')
          fallbackDifficulty = 'easy'
        }
      }

      if (fallbackQuestions.length > 0) {
        // Get unused questions from fallback difficulty
        const unusedFallbackQuestions = fallbackQuestions.filter(question => {
          const originalIndex = questions.indexOf(question)
          return !isQuestionUsed(categoryId, originalIndex)
        })

        if (unusedFallbackQuestions.length > 0) {
          const fallbackQuestion = unusedFallbackQuestions[Math.floor(Math.random() * unusedFallbackQuestions.length)]
          const fallbackIndex = questions.indexOf(fallbackQuestion)

          console.log(`✅ Using ${fallbackDifficulty} question as fallback: "${fallbackQuestion.text}" (requested ${points} points)`)

          setGameState(prev => ({
            ...prev,
            currentQuestion: {
              categoryId,
              questionIndex: fallbackIndex,
              question: fallbackQuestion,
              points,
              category: category.name,
              questionKey: `${categoryId}-${fallbackIndex}`,
              pointValueKey: `${categoryId}-${points}-${buttonIndex}`
            }
          }))

          navigate('/question')
          return
        }
      }

      // Final fallback: use any unused question
      const anyUnusedQuestions = questions.filter((question, index) => {
        return !isQuestionUsed(categoryId, index)
      })

      if (anyUnusedQuestions.length > 0) {
        const finalFallback = anyUnusedQuestions[0]
        const finalIndex = questions.indexOf(finalFallback)
        console.log(`🆘 Final fallback: using any available question (${finalFallback.difficulty})`)

        setGameState(prev => ({
          ...prev,
          currentQuestion: {
            categoryId,
            questionIndex: finalIndex,
            question: finalFallback,
            points,
            category: category.name,
            questionKey: `${categoryId}-${finalIndex}`,
            pointValueKey: `${categoryId}-${points}-${buttonIndex}`
          }
        }))

        navigate('/question')
      } else {
        console.error(`❌ No unused questions available in category: ${categoryId}`)
      }
      return
    }

    // Get unused questions of the target difficulty
    const availableQuestions = questionsWithDifficulty.filter((question, index) => {
      const originalIndex = questions.indexOf(question)
      return !isQuestionUsed(categoryId, originalIndex)
    })

    if (availableQuestions.length === 0) {
      console.warn(`No unused ${targetDifficulty} questions available for category: ${categoryId}`)
      return
    }

    // Pick a random question from available ones
    const randomQuestion = availableQuestions[Math.floor(Math.random() * availableQuestions.length)]
    const originalQuestionIndex = questions.indexOf(randomQuestion)

    console.log(`✅ Selected ${targetDifficulty} question: "${randomQuestion.text}" (${points} points)`)

    setGameState(prev => ({
      ...prev,
      currentQuestion: {
        categoryId,
        questionIndex: originalQuestionIndex,
        question: randomQuestion,
        points,
        category: category.name,
        questionKey: `${categoryId}-${originalQuestionIndex}`,
        pointValueKey: `${categoryId}-${points}-${buttonIndex}`
      }
    }))

    navigate('/question')
  }

  // Auto-scaling system to fit entire screen without scrolling
  const getResponsiveStyles = () => {
    const W = dimensions.width || window.innerWidth
    const H = dimensions.height || window.innerHeight

    // Mobile-first responsive calculations
    const isMobile = W < 768

    // Calculate available space for game board with mobile adjustments
    const actualHeaderHeight = headerHeight || (isMobile ? 60 : 80)
    const actualFooterHeight = footerHeight || (isMobile ? 80 : 100)
    const padding = isMobile ? 8 : 40         // Minimal padding on mobile for max space
    const availableHeight = H - actualHeaderHeight - actualFooterHeight - padding
    const availableWidth = W - padding

    // Option 2: Smart Aspect Ratio Scaling
    const screenRatio = W / H
    const isWideScreen = screenRatio > 1.5

    // Viewport-based responsive scaling - mobile first!
    const vw = W / 100  // 1vw in pixels
    const vh = H / 100  // 1vh in pixels

    // Container-based sizing: use available container space with safety limits

    // Ensure container never exceeds viewport to prevent horizontal scrolling
    const maxSafeWidth = W * 0.95  // Never exceed 95% of viewport width
    const containerWidth = maxSafeWidth

    // Fix vertical inconsistency by using viewport height directly
    const safeVerticalSpace = isMobile ? H * 0.75 : H * 0.80  // Use 75% on mobile, 80% on desktop
    const containerHeight = Math.min(availableHeight * 0.95, safeVerticalSpace)  // Use smaller of calculated or safe space

    // Each category gets 1/3 of container width (minus small gaps) - KEEP HORIZONTAL
    const categoryWidth = (containerWidth - (isMobile ? 8 : 16)) / 3  // 3 categories with small gaps
    const categoryHeight = (containerHeight - (isMobile ? 4 : 8)) / 2  // 2 rows with smaller gap (more vertical space)

    // Within each category: buttons use the full space available
    const buttonColumnWidth = categoryWidth * 0.35   // 35% for each button column (keep horizontal)
    const centerColumnWidth = categoryWidth * 0.30   // 30% for center card (keep horizontal)

    // Button sizing based purely on safe container dimensions - no overflow possible
    const buttonWidth = buttonColumnWidth * 0.9     // 90% of button column (guaranteed to fit)
    const buttonHeight = categoryHeight * 0.35      // 35% of category height (guaranteed to fit)

    // Card uses center column space
    const cardWidth = centerColumnWidth * 0.95
    const cardHeight = buttonHeight * 3

    // Font scaling based on actual button size
    const responsiveFontSize = Math.min(buttonWidth * 0.35, buttonHeight * 0.55)

    // Header and footer scaling - bigger on mobile
    const headerFontSize = isMobile ? vw * 3.5 : vw * 1.8    // 3.5vw on mobile, 1.8vw on desktop
    const footerButtonSize = isMobile ? vh * 7 : vh * 4      // 7vh on mobile, 4vh on desktop

    return {
      cardWidth: cardWidth,               // Viewport-scaled cards
      cardHeight: cardHeight,             // Viewport-scaled cards
      buttonWidth: buttonWidth,           // Viewport-scaled buttons (12vw mobile, 6vw desktop)
      buttonHeight: buttonHeight,         // Viewport-scaled buttons (8vh mobile, 5vh desktop)
      fontSize: responsiveFontSize,       // Viewport-scaled font (4vw mobile, 2vw desktop)
      headerFontSize: headerFontSize,     // Viewport-scaled header
      footerButtonSize: footerButtonSize, // Viewport-scaled footer
      availableHeight: availableHeight,
      isMobile: isMobile
    }
  }

  const styles = getResponsiveStyles()


  if (!gameState.selectedCategories.length) {
    return <div>Loading...</div>
  }

  return (
    <div className="h-screen bg-white flex flex-col" ref={containerRef}>
      {/* Red Header Bar */}
      <div ref={headerRef} className="bg-red-600 text-white p-3 flex-shrink-0 sticky top-0 z-10">
        <div className="flex justify-between items-center">
          <div className="flex gap-3">
            <button
              onClick={() => navigate('/categories')}
              className="px-3 py-1 bg-red-700 hover:bg-red-800 text-white rounded-lg transition-colors"
              style={{ fontSize: `${styles.headerFontSize * 0.8}px` }}
            >
              الخروج
            </button>
            <button
              onClick={() => navigate('/categories')}
              className="px-3 py-1 bg-red-700 hover:bg-red-800 text-white rounded-lg transition-colors"
              style={{ fontSize: `${styles.headerFontSize * 0.8}px` }}
            >
              الرجوع
            </button>
            <button
              onClick={() => navigate('/results')}
              className="px-3 py-1 bg-red-700 hover:bg-red-800 text-white rounded-lg transition-colors"
              style={{ fontSize: `${styles.headerFontSize * 0.8}px` }}
            >
              انهاء
            </button>
          </div>

          <div className="flex items-center gap-2">
            <h1 className="font-bold text-center" style={{ fontSize: `${styles.headerFontSize * 1.2}px` }}>
              {gameState.gameName}
            </h1>
            <PresentationModeToggle />
          </div>

          <div className="flex items-center gap-4">
            <div className="text-center">
              <div className="font-bold" style={{ fontSize: `${styles.headerFontSize * 0.9}px` }}>
                {gameState.team1.name}
              </div>
              <div className="font-bold" style={{ fontSize: `${styles.headerFontSize * 1.1}px` }}>
                {gameState.team1.score}
              </div>
            </div>
            <div className="text-center">
              <div className="font-bold" style={{ fontSize: `${styles.headerFontSize * 0.9}px` }}>
                {gameState.team2.name}
              </div>
              <div className="font-bold" style={{ fontSize: `${styles.headerFontSize * 1.1}px` }}>
                {gameState.team2.score}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Game Board - 2 Rows of 3 Categories Each */}
      <div className="flex-1 bg-white flex flex-col items-center justify-center p-0 max-w-full overflow-x-hidden">
        {/* First Row - 3 Categories with their buttons */}
        <div className={`w-full max-w-full grid grid-cols-3 ${styles.isMobile ? 'gap-1' : 'gap-2'} ${styles.isMobile ? 'mb-0' : 'mb-1'}`} style={{maxWidth: '95vw'}}>
          {gameState.selectedCategories.slice(0, 3).map(categoryId => {
            const category = getCategoryById(categoryId)
            if (!category) return null

            return (
              <div key={categoryId} className="grid grid-rows-3 gap-0 items-stretch justify-items-stretch" style={{gridTemplateColumns: '35% 30% 35%'}}>
                {/* Left Column: First set of buttons (200, 400, 600) */}
                <button
                  key={`${categoryId}-200-0`}
                  onClick={() => handleQuestionClick(categoryId, 200, 0)}
                  disabled={isPointValueUsed(categoryId, 200, 0)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 200, 0)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  200
                </button>

                {/* Center: Category Card (spans 3 rows) */}
                <div
                  className="relative rounded-lg overflow-hidden border-2 border-gray-300 bg-gradient-to-br from-gray-200 to-gray-400 row-span-3 w-full h-full"
                  style={{
                    backgroundImage: category.imageUrl ? `url(${category.imageUrl})` : 'none',
                    backgroundSize: 'cover',
                    backgroundPosition: 'center',
                    backgroundRepeat: 'no-repeat'
                  }}
                >
                  <div className="absolute inset-0 bg-black bg-opacity-20"></div>
                  <div className="absolute bottom-2 left-2 right-2 bg-red-600 text-white px-2 py-1 rounded text-center font-bold"
                       style={{ fontSize: `${styles.fontSize * 0.7}px` }}>
                    <div className="leading-tight">{category.name}</div>
                  </div>
                  {!category.imageUrl && category.image && (
                    <div className="absolute inset-0 flex items-center justify-center"
                         style={{ fontSize: `${styles.cardHeight * 0.4}px` }}>
                      {category.image}
                    </div>
                  )}
                </div>

                {/* Right Column: Second set of buttons (200, 400, 600) */}
                <button
                  key={`${categoryId}-200-1`}
                  onClick={() => handleQuestionClick(categoryId, 200, 1)}
                  disabled={isPointValueUsed(categoryId, 200, 1)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 200, 1)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  200
                </button>

                {/* Left Column: 400 points */}
                <button
                  key={`${categoryId}-400-0`}
                  onClick={() => handleQuestionClick(categoryId, 400, 0)}
                  disabled={isPointValueUsed(categoryId, 400, 0)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 400, 0)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  400
                </button>

                {/* Right Column: 400 points */}
                <button
                  key={`${categoryId}-400-1`}
                  onClick={() => handleQuestionClick(categoryId, 400, 1)}
                  disabled={isPointValueUsed(categoryId, 400, 1)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 400, 1)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  400
                </button>

                {/* Left Column: 600 points */}
                <button
                  key={`${categoryId}-600-0`}
                  onClick={() => handleQuestionClick(categoryId, 600, 0)}
                  disabled={isPointValueUsed(categoryId, 600, 0)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 600, 0)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  600
                </button>

                {/* Right Column: 600 points */}
                <button
                  key={`${categoryId}-600-1`}
                  onClick={() => handleQuestionClick(categoryId, 600, 1)}
                  disabled={isPointValueUsed(categoryId, 600, 1)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 600, 1)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  600
                </button>
              </div>
            )
          })}
        </div>

        {/* Second Row - 3 Categories with their buttons */}
        <div className={`w-full max-w-full grid grid-cols-3 ${styles.isMobile ? 'gap-1' : 'gap-2'}`} style={{maxWidth: '95vw'}}>
          {gameState.selectedCategories.slice(3, 6).map(categoryId => {
            const category = getCategoryById(categoryId)
            if (!category) return null

            return (
              <div key={categoryId} className="grid grid-rows-3 gap-0 items-stretch justify-items-stretch" style={{gridTemplateColumns: '35% 30% 35%'}}>
                {/* Left Column: First set of buttons (200, 400, 600) */}
                <button
                  key={`${categoryId}-200-0`}
                  onClick={() => handleQuestionClick(categoryId, 200, 0)}
                  disabled={isPointValueUsed(categoryId, 200, 0)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 200, 0)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  200
                </button>

                {/* Center: Category Card (spans 3 rows) */}
                <div
                  className="relative rounded-lg overflow-hidden border-2 border-gray-300 bg-gradient-to-br from-gray-200 to-gray-400 row-span-3 w-full h-full"
                  style={{
                    backgroundImage: category.imageUrl ? `url(${category.imageUrl})` : 'none',
                    backgroundSize: 'cover',
                    backgroundPosition: 'center',
                    backgroundRepeat: 'no-repeat'
                  }}
                >
                  <div className="absolute inset-0 bg-black bg-opacity-20"></div>
                  <div className="absolute bottom-2 left-2 right-2 bg-red-600 text-white px-2 py-1 rounded text-center font-bold"
                       style={{ fontSize: `${styles.fontSize * 0.7}px` }}>
                    <div className="leading-tight">{category.name}</div>
                  </div>
                  {!category.imageUrl && category.image && (
                    <div className="absolute inset-0 flex items-center justify-center"
                         style={{ fontSize: `${styles.cardHeight * 0.4}px` }}>
                      {category.image}
                    </div>
                  )}
                </div>

                {/* Right Column: Second set of buttons (200, 400, 600) */}
                <button
                  key={`${categoryId}-200-1`}
                  onClick={() => handleQuestionClick(categoryId, 200, 1)}
                  disabled={isPointValueUsed(categoryId, 200, 1)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 200, 1)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  200
                </button>

                {/* Left Column: 400 points */}
                <button
                  key={`${categoryId}-400-0`}
                  onClick={() => handleQuestionClick(categoryId, 400, 0)}
                  disabled={isPointValueUsed(categoryId, 400, 0)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 400, 0)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  400
                </button>

                {/* Right Column: 400 points */}
                <button
                  key={`${categoryId}-400-1`}
                  onClick={() => handleQuestionClick(categoryId, 400, 1)}
                  disabled={isPointValueUsed(categoryId, 400, 1)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 400, 1)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  400
                </button>

                {/* Left Column: 600 points */}
                <button
                  key={`${categoryId}-600-0`}
                  onClick={() => handleQuestionClick(categoryId, 600, 0)}
                  disabled={isPointValueUsed(categoryId, 600, 0)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 600, 0)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  600
                </button>

                {/* Right Column: 600 points */}
                <button
                  key={`${categoryId}-600-1`}
                  onClick={() => handleQuestionClick(categoryId, 600, 1)}
                  disabled={isPointValueUsed(categoryId, 600, 1)}
                  className={`border-2 font-bold rounded-full shadow-md transition-all duration-200 w-full h-full flex items-center justify-center ${
                    isPointValueUsed(categoryId, 600, 1)
                      ? 'bg-gray-300 border-gray-400 text-gray-500 cursor-not-allowed opacity-50'
                      : 'bg-white border-gray-300 text-red-600 hover:shadow-lg hover:scale-105'
                  }`}
                  style={{
                    fontSize: `${styles.fontSize}px`
                  }}
                >
                  600
                </button>
              </div>
            )
          })}
        </div>
      </div>

      {/* Footer Score Controls */}
      <div ref={footerRef} className="bg-white border-t-2 border-gray-200 p-2 flex-shrink-0 sticky bottom-0 z-10">
        <div className="flex justify-between items-center max-w-6xl mx-auto">
          {/* Team 2 Controls (Left) */}
          <div className="flex items-center gap-2">
            <button
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full font-bold transition-colors"
              style={{ fontSize: `${styles.headerFontSize * 0.9}px` }}
            >
              {gameState.team2.name}
            </button>
            <button
              onClick={() => setGameState(prev => ({
                ...prev,
                team2: { ...prev.team2, score: Math.max(0, prev.team2.score - 100) }
              }))}
              className="bg-red-500 hover:bg-red-600 text-white rounded-full font-bold transition-colors"
              style={{
                width: `${styles.footerButtonSize}px`,
                height: `${styles.footerButtonSize}px`,
                fontSize: `${styles.headerFontSize}px`
              }}
            >
              -
            </button>
            <div
              className="bg-white border-2 border-gray-300 rounded-full flex items-center justify-center font-bold"
              style={{
                width: `${styles.footerButtonSize * 1.3}px`,
                height: `${styles.footerButtonSize * 1.3}px`,
                fontSize: `${styles.headerFontSize}px`
              }}
            >
              {gameState.team2.score}
            </div>
            <button
              onClick={() => setGameState(prev => ({
                ...prev,
                team2: { ...prev.team2, score: prev.team2.score + 100 }
              }))}
              className="bg-green-500 hover:bg-green-600 text-white rounded-full font-bold transition-colors"
              style={{
                width: `${styles.footerButtonSize}px`,
                height: `${styles.footerButtonSize}px`,
                fontSize: `${styles.headerFontSize}px`
              }}
            >
              +
            </button>
          </div>

          {/* Center spacing */}
          <div className="flex-1"></div>

          {/* Team 1 Controls (Right) */}
          <div className="flex items-center gap-2">
            <button
              onClick={() => setGameState(prev => ({
                ...prev,
                team1: { ...prev.team1, score: Math.max(0, prev.team1.score - 100) }
              }))}
              className="bg-red-500 hover:bg-red-600 text-white rounded-full font-bold transition-colors"
              style={{
                width: `${styles.footerButtonSize}px`,
                height: `${styles.footerButtonSize}px`,
                fontSize: `${styles.headerFontSize}px`
              }}
            >
              -
            </button>
            <div
              className="bg-white border-2 border-gray-300 rounded-full flex items-center justify-center font-bold"
              style={{
                width: `${styles.footerButtonSize * 1.3}px`,
                height: `${styles.footerButtonSize * 1.3}px`,
                fontSize: `${styles.headerFontSize}px`
              }}
            >
              {gameState.team1.score}
            </div>
            <button
              onClick={() => setGameState(prev => ({
                ...prev,
                team1: { ...prev.team1, score: prev.team1.score + 100 }
              }))}
              className="bg-green-500 hover:bg-green-600 text-white rounded-full font-bold transition-colors"
              style={{
                width: `${styles.footerButtonSize}px`,
                height: `${styles.footerButtonSize}px`,
                fontSize: `${styles.headerFontSize}px`
              }}
            >
              +
            </button>
            <button
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full font-bold transition-colors"
              style={{ fontSize: `${styles.headerFontSize * 0.9}px` }}
            >
              {gameState.team1.name}
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default GameBoard