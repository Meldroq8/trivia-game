rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ===== USERS COLLECTION =====
    // Allow admins to read all users for user management
    match /users/{document=**} {
      allow read: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow admins to update any user's role (for user management)
      allow update: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // User settings (nested under users/{userId}/settings/preferences)
      match /settings/preferences {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // User game state (nested under users/{userId}/game-state/current)
      match /game-state/current {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // User statistics (nested under users/{userId}/stats/data)
      match /stats/data {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // ===== GAMES COLLECTION =====
    // Users can read and write their own games
    match /games/{gameId} {
      allow read, write: if request.auth != null &&
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId;
    }

    // ===== APP SETTINGS COLLECTION =====
    // App-wide settings (logo, global config)
    match /settings/app-settings {
      // Allow ALL users (authenticated and unauthenticated) to read app settings for logo display
      allow read: if true;

      // Only authenticated admins can write app settings
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Generic settings documents (including app-settings)
    match /settings/{document} {
      // Allow ALL users to read settings (for logo and public config)
      allow read: if true;

      // Only authenticated admins can write to settings
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Question usage tracking - users can only access their own usage data
    match /questionUsage/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // ===== MODERATOR AND ADMIN COLLECTIONS =====
    // Questions collection - allow public read access for the trivia game, only admins to write
    match /questions/{questionId} {
      allow read: if true; // Public read access for trivia game
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;

      // Nested questions subcollection
      match /questions/{nestedQuestionId} {
        allow read: if true; // Public read access for trivia game
        allow write: if request.auth != null &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      }
    }

    // Pending questions collection - moderators can submit, admins can approve/deny
    match /pending-questions/{questionId} {
      allow read: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true);
      allow create: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true);
      allow update, delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Categories collection - allow public read access for the trivia game, admins and moderators to write
    match /categories/{categoryId} {
      allow read: if true; // Public read access for trivia game
      allow write: if request.auth != null &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true);
    }

    // ===== LEADERBOARD COLLECTION =====
    // Public leaderboard - everyone can read, only server/admin can write
    match /leaderboard/{document} {
      allow read: if true; // Public read access for everyone
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // ===== LOADER SYSTEM =====
    // User roles collection
    match /user_roles/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Invite codes collection
    match /invite_codes/{codeId} {
      // Allow unauthenticated read for invite code validation
      allow read: if true;
      allow create: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow update: if request.auth != null; // For marking as used
      allow delete: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Pending questions from loaders
    match /pending_questions/{questionId} {
      // Allow list (query) if authenticated as admin OR if the query uses inviteCode filter
      // Note: We can't validate inviteCode in list queries, so we allow all list queries
      // Individual document reads are still protected below
      allow list: if true;

      // Allow get (single document read) if:
      // 1. Authenticated user is the creator
      // 2. Authenticated user is admin
      // 3. Document has inviteCode field (for link-based access)
      allow get: if (request.auth != null &&
                    (request.auth.uid == resource.data.createdBy ||
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true)) ||
                    (resource.data.inviteCode != null);

      // Allow create if:
      // 1. Authenticated loader
      // 2. Unauthenticated but has inviteCode field and it's a valid invite code
      allow create: if (request.auth != null &&
                      get(/databases/$(database)/documents/user_roles/$(request.auth.uid)).data.role == 'loader') ||
                     (request.resource.data.inviteCode != null &&
                      exists(/databases/$(database)/documents/invite_codes/$(request.resource.data.inviteCode)));

      // Allow update if:
      // 1. Authenticated user created it and status is pending
      // 2. Authenticated admin
      // 3. Unauthenticated but inviteCode matches and status is pending
      allow update: if (request.auth != null &&
                      ((request.auth.uid == resource.data.createdBy && resource.data.status == 'pending') ||
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true)) ||
                     (resource.data.inviteCode != null &&
                      resource.data.inviteCode == resource.data.createdBy &&
                      resource.data.status == 'pending');

      // Allow delete if:
      // 1. Authenticated user created it and status is pending
      // 2. Authenticated admin
      // 3. Unauthenticated but inviteCode matches and status is pending
      allow delete: if (request.auth != null &&
                      ((request.auth.uid == resource.data.createdBy && resource.data.status == 'pending') ||
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true)) ||
                     (resource.data.inviteCode != null &&
                      resource.data.inviteCode == resource.data.createdBy &&
                      resource.data.status == 'pending');
    }

    // ===== DEFAULT DENY =====
    // Deny access to any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}