name: Deploy to Firebase Hosting

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'
  schedule:
    # Run every 6 hours to sync any new images
    - cron: '0 */6 * * *'

env:
  NODE_VERSION: '20'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          /usr/local/lib/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}-v2
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Install Firebase CLI globally
      run: |
        if ! command -v firebase &> /dev/null; then
          echo "Installing Firebase CLI..."
          npm install -g firebase-tools@latest
        else
          echo "Firebase CLI already installed: $(firebase --version)"
        fi

    - name: Sync Firebase Storage images
      env:
        FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_LAMAH_357F3 }}
      run: |
        # Create media directories
        mkdir -p public/images/categories
        mkdir -p public/images/questions

        # Set up Firebase service account authentication
        if [ -n "$FIREBASE_SERVICE_ACCOUNT" ]; then
          echo "üîë Setting up Firebase authentication..."
          echo "$FIREBASE_SERVICE_ACCOUNT" > service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="service-account.json"

          # Run comprehensive Firebase Storage sync
          echo "üîÑ Starting comprehensive Firebase Storage image sync..."
          echo "üì• This will download ALL category and question images automatically"

          if node scripts/simple-sync.js; then
            echo "‚úÖ Firebase Storage sync completed successfully!"
            echo "üìä Downloaded images summary:"
            echo "   Categories: $(find public/images/categories -name "*.webp" -o -name "*.jpg" -o -name "*.png" | wc -l) images"
            echo "   Questions: $(find public/images/questions -name "*.webp" -o -name "*.jpg" -o -name "*.png" | wc -l) images"
            echo "   Total: $(find public/images -name "*.webp" -o -name "*.jpg" -o -name "*.png" | wc -l) images"

            echo "üìã Category images downloaded:"
            ls -la public/images/categories/ | grep -E '\.(webp|jpg|png)$' || echo "   No images found"
          else
            echo "‚ö†Ô∏è Firebase Storage sync failed, deployment will continue with Firebase URLs"
            echo "üîÑ Fallback system will handle missing images automatically"
          fi

          # Clean up credentials
          rm -f service-account.json
        else
          echo "‚ö†Ô∏è No Firebase service account found, skipping image sync"
          echo "üîÑ Fallback system will load images from Firebase Storage during runtime"
        fi
      continue-on-error: true

    - name: Build project
      env:
        VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
        VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
      run: npm run build

    - name: Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LAMAH_357F3 }}'
        projectId: lamah-357f3
        channelId: live