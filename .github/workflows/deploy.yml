name: Deploy to Firebase Hosting

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install image processing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick webp

    - name: Sync and process Firebase Storage images
      env:
        FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_LAMAH_357F3 }}
      run: |
        # Create media directories
        mkdir -p public/images/categories
        mkdir -p public/images/questions
        mkdir -p public/audio
        mkdir -p public/video

        # Install Firebase CLI
        npm install -g firebase-tools

        # Set up Firebase service account
        echo "$FIREBASE_SERVICE_ACCOUNT" > service-account.json
        export GOOGLE_APPLICATION_CREDENTIALS="service-account.json"

        # Create Firebase Storage sync script
        cat > sync-firebase-storage.js << 'EOF'
        const { Storage } = require('@google-cloud/storage');
        const https = require('https');
        const fs = require('fs');
        const path = require('path');
        const { execSync } = require('child_process');

        const storage = new Storage();
        const bucketName = 'lamah-357f3.appspot.com';

        async function downloadAndProcessImages() {
          try {
            const [files] = await storage.bucket(bucketName).getFiles({
              prefix: 'categories/'
            });

            for (const file of files) {
              if (file.name.match(/\.(jpg|jpeg|png|webp)$/i)) {
                const filename = path.basename(file.name);
                const localPath = `public/images/categories/${filename}`;

                console.log(`Processing: ${file.name} -> ${localPath}`);

                // Download file
                await file.download({ destination: localPath });

                // Process image (resize and optimize)
                const baseName = path.parse(filename).name;
                const ext = 'webp';

                // Generate multiple sizes
                execSync(`convert "${localPath}" -resize 800x600^ -gravity center -extent 800x600 -quality 85 "public/images/categories/${baseName}_large.${ext}"`);
                execSync(`convert "${localPath}" -resize 400x300^ -gravity center -extent 400x300 -quality 80 "public/images/categories/${baseName}_medium.${ext}"`);
                execSync(`convert "${localPath}" -resize 150x113^ -gravity center -extent 150x113 -quality 75 "public/images/categories/${baseName}_thumb.${ext}"`);

                // Keep original as webp
                execSync(`convert "${localPath}" -quality 90 "public/images/categories/${baseName}_original.${ext}"`);

                // Remove the downloaded original
                fs.unlinkSync(localPath);
              }
            }

            // Process question images
            const [questionFiles] = await storage.bucket(bucketName).getFiles({
              prefix: 'questions/'
            });

            for (const file of questionFiles) {
              if (file.name.match(/\.(jpg|jpeg|png|webp)$/i)) {
                const filename = path.basename(file.name);
                const localPath = `public/images/questions/${filename}`;

                console.log(`Processing: ${file.name} -> ${localPath}`);

                await file.download({ destination: localPath });

                const baseName = path.parse(filename).name;
                const ext = 'webp';

                // Generate sizes for questions
                execSync(`convert "${localPath}" -resize 600x400^ -gravity center -extent 600x400 -quality 85 "public/images/questions/${baseName}_large.${ext}"`);
                execSync(`convert "${localPath}" -resize 300x200^ -gravity center -extent 300x200 -quality 80 "public/images/questions/${baseName}_medium.${ext}"`);
                execSync(`convert "${localPath}" -resize 150x100^ -gravity center -extent 150x100 -quality 75 "public/images/questions/${baseName}_thumb.${ext}"`);

                execSync(`convert "${localPath}" -quality 90 "public/images/questions/${baseName}_original.${ext}"`);
                fs.unlinkSync(localPath);
              }
            }

            console.log('Firebase Storage sync and processing complete!');
          } catch (error) {
            console.log('Firebase Storage sync failed (non-critical):', error.message);
          }
        }

        downloadAndProcessImages();
        EOF

        # Install Google Cloud Storage
        npm install @google-cloud/storage

        # Run Firebase sync
        node sync-firebase-storage.js

        # Process any manual uploads in uploads/ folder
        if [ -d "uploads" ]; then
          echo "Processing manual uploads..."

          # Process category uploads
          if [ -d "uploads/categories" ]; then
            for file in uploads/categories/*; do
              if [[ -f "$file" ]]; then
                filename=$(basename "$file")
                baseName="${filename%.*}"

                # Generate processed versions
                convert "$file" -resize 800x600^ -gravity center -extent 800x600 -quality 85 "public/images/categories/${baseName}_large.webp"
                convert "$file" -resize 400x300^ -gravity center -extent 400x300 -quality 80 "public/images/categories/${baseName}_medium.webp"
                convert "$file" -resize 150x113^ -gravity center -extent 150x113 -quality 75 "public/images/categories/${baseName}_thumb.webp"
                convert "$file" -quality 90 "public/images/categories/${baseName}_original.webp"
              fi
            done
          fi

          # Process question uploads
          if [ -d "uploads/questions" ]; then
            for file in uploads/questions/*; do
              if [[ -f "$file" ]]; then
                filename=$(basename "$file")
                baseName="${filename%.*}"

                convert "$file" -resize 600x400^ -gravity center -extent 600x400 -quality 85 "public/images/questions/${baseName}_large.webp"
                convert "$file" -resize 300x200^ -gravity center -extent 300x200 -quality 80 "public/images/questions/${baseName}_medium.webp"
                convert "$file" -resize 150x100^ -gravity center -extent 150x100 -quality 75 "public/images/questions/${baseName}_thumb.webp"
                convert "$file" -quality 90 "public/images/questions/${baseName}_original.webp"
              fi
            done
          fi

          # Copy audio and video files directly
          if [ -d "uploads/audio" ]; then
            cp -r uploads/audio/* public/audio/ 2>/dev/null || true
          fi

          if [ -d "uploads/video" ]; then
            cp -r uploads/video/* public/video/ 2>/dev/null || true
          fi

          echo "Manual uploads processed"
        fi

        # Clean up
        rm -f service-account.json

        echo "Image processing pipeline complete!"

    - name: Build project
      run: npm run build

    - name: Deploy to Firebase Hosting
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_LAMAH_357F3 }}'
        projectId: lamah-357f3
        channelId: live